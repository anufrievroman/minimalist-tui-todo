#!/usr/bin/env python

from curses import *
import csv
from pathlib import Path
import os
from configparser import ConfigParser


# LOAD CONFIG AND DATA
config_folder = str(Path.home())+"/.config/mintodo"
if not os.path.exists(config_folder):
    os.makedirs(config_folder)

config_file = str(Path.home()) + "/.config/mintodo/config.ini"
calcurse_file = str(Path.home()) + "/.local/share/calcurse/todo"
conf = ConfigParser()

def create_config():
    '''Create config file if it does not exist yet'''
    conf["Parameters"] = {
        "hint": "a: Add · v (V): Done (all) · i (I): Important (all) · u (U): Unmark (all) · e: Edit · d (D): Delete (all) · ?: Help · q: Quit",
        "folder_with_datafile": str(config_folder),
        "calcurse_data_file": str(calcurse_file),
        "show_keybindings": "Yes",
        "use_unicode_icons": "Yes",
        "delete_confirmation": "No",
        "done_icon": "✔",
        "todo_icon": "•",
        "important_icon": "‣",
        "show_header": "Yes",
        "header": "TODO LIST:",
        }

    conf["Colors"] = {
        "color_todo": "7",
        "color_done": "6",
        "color_title": "1",
        "color_hints": "7",
        "color_promts": "7",
        "color_confirm": "1",
        "color_important": "1",
        }
    with open(config_file, 'w') as f:
        conf.write(f)

if not os.path.exists(config_file):
    create_config()
conf.read(config_file)

try:
    CALCURSE_FILE       = conf.get("Parameters", "calcurse_data_file")
    TITLE               = conf.get("Parameters", "header")
    HINT                = conf.get("Parameters", "hint")
    SHOW_TITLE          = conf.getboolean("Parameters", "show_header")
    SHOW_KEYBINDINGS    = conf.getboolean("Parameters", "show_keybindings")
    DELETE_CONFIRMATION = conf.getboolean("Parameters", "delete_confirmation")
    USE_ICONS           = conf.getboolean("Parameters", "use_unicode_icons")

    if USE_ICONS:
        DONE_ICON           = conf.get("Parameters", "done_icon")
        TODO_ICON           = conf.get("Parameters", "todo_icon")
        IMPORTANT_ICON      = conf.get("Parameters", "important_icon")
    else:
        DONE_ICON           = "×"
        TODO_ICON           = "·"
        IMPORTANT_ICON      = "!"

    COLOR_TODO      = int(conf.get("Colors", "color_todo"))
    COLOR_DONE      = int(conf.get("Colors", "color_done"))
    COLOR_TITLE     = int(conf.get("Colors", "color_title"))
    COLOR_HINTS     = int(conf.get("Colors", "color_hints"))
    COLOR_PROMTS    = int(conf.get("Colors", "color_promts"))
    COLOR_COMFIRM   = int(conf.get("Colors", "color_confirm"))
    COLOR_IMPORTANT = int(conf.get("Colors", "color_important"))
    data_folder = conf.get("Parameters", "folder_with_datafile") 
except:
    print("Error in the config.ini file. Try removing the config file and run the program again.")
    exit()

DATAFILE = data_folder + "/tasks.csv"

def load_tasks():
    '''This function reads from the user's appointments file'''
    try:
        with open(DATAFILE) as f:
            pass
    except IOError:
        with open(DATAFILE, "w+") as f:
            pass
    with open(DATAFILE,"r") as f:
        apts = csv.reader(f, delimiter = ',')
        tasks = []
        statuses = []
        try:
            for row in apts:
                tasks.append(row[0])
                statuses.append(row[1])
        except:
            pass
    return tasks, statuses


def delete_all(stdscr):
    '''Delete all the tasks'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(False)
    try:
        confirmed = True
        if DELETE_CONFIRMATION:
            stdscr.addstr(y_max-3, 1, "Really delete all tasks? (y/n) ", color_pair(6))
            stdscr.refresh()
            answer = stdscr.getch()
            confirmed = True if answer == 121 else False
        if confirmed: 
            with open(DATAFILE, 'w'):
                pass        
    except:
        pass


def calcurse_export(stdscr):
    '''Import todo events from calcurse database'''
    y_max, _ = stdscr.getmaxyx()
    try:
        stdscr.addstr(y_max-3, 1, "Import tasks from calcurse? (y/n) ", color_pair(6))
        stdscr.refresh()
        answer = stdscr.getkey()
        confirmed = True if answer == "y" else False
        if confirmed: 
            with open(CALCURSE_FILE, 'r') as f:
                for task in f.readlines():
                    if len(task) > 0:
                        with open(DATAFILE,"a") as f:
                            f.write(task[4:-1] + ",todo\n")
    except:
        pass


def mark_all_as_done(stdscr, tasks):
    '''Mark all the tasks as done'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(False)
    try:
        confirmed = True
        if DELETE_CONFIRMATION:
            stdscr.addstr(y_max-3, 1, "Really mark all tasks as done? (y/n) ", color_pair(6))
            stdscr.refresh()
            answer = stdscr.getch()
            confirmed = True if answer == 121 else False
        if confirmed: 
            with open(DATAFILE, "w") as f:
                for task in tasks:
                    f.write(task + ",done\n")
    except:
        pass


def mark_all_as_important(stdscr, tasks):
    '''Mark all the tasks as important'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(False)
    try:
        confirmed = True
        if DELETE_CONFIRMATION:
            stdscr.addstr(y_max-3, 1, "Really mark all tasks as important? (y/n) ", color_pair(6))
            stdscr.refresh()
            answer = stdscr.getch()
            confirmed = True if answer == 121 else False
        if confirmed: 
            with open(DATAFILE, "w") as f:
                for task in tasks:
                    f.write(task + ",important\n")
    except:
        pass


def unmark_all(stdscr, tasks):
    '''Unmark all the tasks'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(False)
    try:
        confirmed = True
        if DELETE_CONFIRMATION:
            stdscr.addstr(y_max-3, 1, "Really unmark all the tasks? (y/n) ", color_pair(6))
            stdscr.refresh()
            answer = stdscr.getch()
            confirmed = True if answer == 121 else False
        if confirmed: 
            with open(DATAFILE, "w") as f:
                for task in tasks:
                    f.write(task + ",todo\n")
    except:
        pass


def delete(stdscr, tasks, statuses):
    '''Promt the user which task to delete and change the file'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(True)
    shift = 3 if SHOW_TITLE else 0
    for	i in range(len(tasks)):
        stdscr.addstr(shift+i, 1, str(i+1))
    delete_promt = "Delete task number: "
    stdscr.addstr(y_max-3, 1, delete_promt, color_pair(5))
    stdscr.refresh()
    number = stdscr.getstr(y_max - 3, len(delete_promt)+1, 3)
    curs_set(False)
    try:
        if int(number) > 0 and int(number) <= len(tasks):
            confirmed = True
            if DELETE_CONFIRMATION:
                stdscr.addstr(y_max-3, 1, "Really delete this task? (y/n) ", color_pair(6))
                stdscr.refresh()
                answer = stdscr.getch()
                confirmed = True if answer == 121 else False
            if confirmed:
                del tasks[int(number)-1]
                del statuses[int(number)-1]
                with open(DATAFILE,"w") as f:
                    for task, status in zip(tasks, statuses):
                        f.write(task+","+status+"\n")
    except:
        pass
    return


def edit(stdscr, tasks, statuses):
    '''Promt the user which task to delete and change the file'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(True)
    shift = 3 if SHOW_TITLE else 0
    for	i in range(len(tasks)):
        stdscr.addstr(shift+i, 1, str(i+1))
    edit_promt = "Edit task number: "
    stdscr.addstr(y_max-3, 1, edit_promt, color_pair(5))
    stdscr.refresh()
    number = stdscr.getstr(y_max - 3, len(edit_promt)+1, 3)

    try:
        if int(number) > 0 and int(number) <= len(tasks):
            edit_promt = "Enter new task: "
            stdscr.addstr(y_max-3, 1, edit_promt+" "*(x_max-len(edit_promt)))
            new_task = stdscr.getstr(y_max - 3, len(edit_promt)+1, x_max - len(edit_promt)).decode(encoding="utf-8")
            curs_set(False)
            try:
                if len(new_task) > 0:
                    tasks[int(number)-1] = new_task
                    with open(DATAFILE,"w") as f:
                        for task, status in zip(tasks, statuses):
                            f.write(task+","+status+"\n")
            except:
                pass
    except:
        pass
    return


def mark_as_done(stdscr, tasks, statuses):
    '''Promts the user to witch task to mark as done and changes the file'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(True)
    shift = 3 if SHOW_TITLE else 0
    for	i in range(len(tasks)):
        stdscr.addstr(shift+i, 1, str(i+1))
    mark_promt = "Mark as done task number: "
    stdscr.addstr(y_max-3, 1, mark_promt, color_pair(5))
    stdscr.refresh()
    number = stdscr.getstr(y_max - 3, len(mark_promt)+1, 3)
    try:
        if int(number) > 0 and int(number) <= len(tasks):
            statuses[int(number)-1] = "done"
            with open(DATAFILE,"w") as f:
                for task, status in zip(tasks, statuses):
                    f.write(task+","+status+"\n")
    except:
        pass
    return


def mark_as_important(stdscr, tasks, statuses):
    '''Promts the user to witch task to mark as done and changes the file'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(True)
    shift = 3 if SHOW_TITLE else 0
    for	i in range(len(tasks)):
        stdscr.addstr(shift+i, 1, str(i+1))
    mark_promt = "Mark as important task number: "
    stdscr.addstr(y_max-3, 1, mark_promt, color_pair(5))
    stdscr.refresh()
    number = stdscr.getstr(y_max - 3, len(mark_promt)+1, 3)
    try:
        if int(number) > 0 and int(number) <= len(tasks):
            statuses[int(number)-1] = "important"
            with open(DATAFILE,"w") as f:
                for task, status in zip(tasks, statuses):
                    f.write(task+","+status+"\n")
    except:
        pass
    return


def unmark(stdscr, tasks, statuses):
    '''Promt the user which task to unmark as done and changes the file'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(True)
    shift = 3 if SHOW_TITLE else 0
    for	i in range(len(tasks)):
        stdscr.addstr(shift+i, 1, str(i+1))
    mark_promt = "Unmark as done task number: "
    stdscr.addstr(y_max-3, 1, mark_promt, color_pair(5))
    stdscr.refresh()
    number = stdscr.getstr(y_max - 3, len(mark_promt)+1, 3)
    try:
        if int(number) > 0 and int(number) <= len(tasks):
            statuses[int(number)-1] = "todo"
            with open(DATAFILE,"w") as f:
                for task, status in zip(tasks, statuses):
                    f.write(task+","+status+"\n")
    except:
        pass
    return
    

def add_task(stdscr):
    '''Promt the user to input new task and adds it to the file'''
    y_max, x_max = stdscr.getmaxyx()
    echo() 
    curs_set(True)
    try:
        enter_promt = "Enter new task: "
        stdscr.addstr(y_max-3, 1, enter_promt, color_pair(5))
        stdscr.refresh()
        new_task = stdscr.getstr(y_max - 3, len(enter_promt)+1, x_max - len(enter_promt)).decode(encoding="utf-8")
        if len(new_task) > 0:
            with open(DATAFILE,"a") as f:
                f.write(new_task + ",todo\n")
    except:
        pass
    return


def main(stdscr):
    '''This is the main function that runs the screen'''
    # locale.setlocale(locale.LC_ALL, '') # This is needed for unicode caracters
    stdscr = initscr()
    start_color()

    # Defining colors:
    use_default_colors()
    init_pair(1, COLOR_TITLE, -1)
    init_pair(2, COLOR_TODO, -1)
    init_pair(3, COLOR_DONE, -1)
    init_pair(4, COLOR_HINTS, -1)
    init_pair(5, COLOR_PROMTS, -1)
    init_pair(6, COLOR_COMFIRM, -1)
    init_pair(7, COLOR_IMPORTANT, -1)

    noecho()
    curs_set(False)
    y_max, x_max = stdscr.getmaxyx()
    running = True
    show_hints = SHOW_KEYBINDINGS
    while (running):
        stdscr.clear()
        noecho()
        curs_set(False)
        tasks, statuses = load_tasks()
        if SHOW_TITLE:
            stdscr.addstr(1, 1, TITLE, color_pair(1))
        shift = 3 if SHOW_TITLE else 0

        # Display the tasks:
        for index, task in enumerate(tasks):
            if statuses[index] == "done":
                stdscr.addstr(index+shift,1,DONE_ICON.encode('UTF-8'), color_pair(3)) 
                stdscr.addstr(index+shift,3,str(task), color_pair(3)) 
            elif statuses[index] == "important":
                stdscr.addstr(index+shift,1,IMPORTANT_ICON.encode('UTF-8'), color_pair(7)) 
                stdscr.addstr(index+shift,3,str(task), color_pair(7)) 
            else: 
                stdscr.addstr(index+shift,1,TODO_ICON.encode('UTF-8'), color_pair(2)) 
                stdscr.addstr(index+shift,3,str(task), color_pair(2))

	# Display the hints
        if show_hints:
            stdscr.addstr(y_max - 1, 1, HINT[:x_max-2], color_pair(4))

        # stdscr.addstr(y_max - 2, 0, "You pressed"+str(key))
        stdscr.refresh()

        # Getting user's input
        try:
            key = stdscr.getkey()

            # Handle screen resize
            if key == "KEY_RESIZE":
                y_max, x_max = stdscr.getmaxyx()
                stdscr.clear()
                stdscr.refresh()

            # Handle various keys
            if key == "q": running = False
            if key == "D": delete_all(stdscr)
            if key == "a": add_task(stdscr)
            if key == "v": mark_as_done(stdscr, tasks, statuses)
            if key == "V": mark_all_as_done(stdscr, tasks)
            if key == "i": mark_as_important(stdscr, tasks, statuses)
            if key == "I": mark_all_as_important(stdscr, tasks)
            if key == "u": unmark(stdscr, tasks, statuses)
            if key == "U": unmark_all(stdscr, tasks)
            if key == "x": calcurse_export(stdscr)
            if key == "?": show_hints = not show_hints
            if key == "d": delete(stdscr, tasks, statuses)
            if key in ["e", "c"]: edit(stdscr, tasks, statuses)
        except KeyboardInterrupt:
            running = False

    echo()
    curs_set(True)
    endwin()
    return

if __name__ == "__main__":
    wrapper(main)
